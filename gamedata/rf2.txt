"Games"
{
	"tf"
	{
		"Offsets"
		{
			"CBasePlayer::EquipWearable"
			{
				"linux"		"439"
				"windows"	"438"
				"linux64"	"439"
				"windows64"	"438"
			}
			"CBaseObject::StartUpgrading"
			{
				"linux"		"384"
				"windows"	"383"
				"linux64"	"384"
				"windows64"	"383"
			}
			"CBaseObject::OnWrenchHit"
			{
				"linux"		"366"
				"windows"	"365"
				"linux64"	"366"
				"windows64"	"365"
			}
			"CBaseEntity::TakeHealth"
			{
				"linux"		"67"
				"windows"	"66"
				"linux64"	"67"
				"windows64"	"66"
			}
			"CBaseEntity::IsCombatItem"
			{
				"linux"		"88"
				"windows"	"87"
				"linux64"	"88"
				"windows64"	"87"
			}
			"CPhysicsProp::VPhysicsCollision"
			{
				"linux"		"168"
				"windows"	"167"
				"linux64"	"168"
				"windows64"	"167"
			}
			"CTFSniperRifle::ItemPostFrame"
			{
				"linux"		"278"
				"windows"	"272"
				"linux64"	"278"
				"windows64"	"272"
			}
			"CTFWeaponBaseMelee::Smack"
			{
				"linux"		"477"
				"windows"	"470"
				"linux64"	"477"
				"windows64"	"470"
			}
			"CVEngineServer::CreateFakeClientEx"
			{
				"linux"		"116"
				"windows"	"116"
				"linux64"	"116"
				"windows64"	"116"
			}
			"CVEngineServer::IsDedicatedServer"
			{
				"linux"		"2"
				"windows"	"2"
				"linux64"	"2"
				"windows64"	"2"
			}
			"CBaseFilter::PassesFilterImpl"
			{
				"linux"		"199"
				"windows"	"198"
				"linux64"	"199"
				"windows64"	"198"
			}
		}
		"Signatures"
		{
			// 64 BIT WINDOWS SIGNATURES ARE UNTESTED

			"CBaseEntity::Intersects"
			{
				"linux"		"@_ZN11CBaseEntity10IntersectsEPS_"
				"windows"	"\x55\x8B\xEC\x83\x2A\x18\x00\x56\x74\x6E\x8B\x75\x08\x83\x2A\x18\x00\x74\x65\x8B\x2A\x2A\x2A\x00\x00\x81\x2A\x2A\x2A\x00\x00\xD9\xEE\x57\x51"
				"linux64"	"@_ZN11CBaseEntity10IntersectsEPS_"
				"windows64"	""
			}
			"CTFWeaponBase::SetReloadTimer" // Look for string "mult_reload_time_while_healed"
			{
				"linux"		"@_ZN13CTFWeaponBase14SetReloadTimerEf"
				"windows"	"\x55\x8B\xEC\x83\xEC\x10\xF3\x0F\x10\x45\x08\x56"
				"linux64"	"@_ZN13CTFWeaponBase14SetReloadTimerEf"
				"windows64"	"\x48\x89\x5C\x24\x20\x57\x48\x83\xEC\x60\x0F\x29\x7C\x24\x40"
			}
			"CTFPlayer::ApplyPunchImpulseX" // Look for string "aiming_no_flinch"
			{
				"linux"		"@_ZN9CTFPlayer18ApplyPunchImpulseXEf"
				"windows"	"\x55\x8B\xEC\x83\xEC\x08\x53\x56\x8B\xF1\xB3\x01"
				"linux64"	"@_ZN9CTFPlayer18ApplyPunchImpulseXEf"
				"windows64"	"\x48\x89\x5C\x24\x08\x57\x48\x83\xEC\x40\x48\x8D\x81\x20\x27\x00\x00"
			}
			// Look for string "mult_medigun_overheal_amount"
			// The correct subroutine will NOT contain "set_weapon_mode"
			"CWeaponMedigun::GetOverhealBonus"
			{
				"linux"		"@_ZN14CWeaponMedigun16GetOverHealBonusEP9CTFPlayer"
				"windows"	"\x55\x8B\xEC\x83\xEC\x08\xA1\x2A\x2A\x2A\x2A\xD9\xE8"
				"linux64"	"@_ZN14CWeaponMedigun16GetOverHealBonusEP9CTFPlayer"
				"windows64"	""
			}
			"HandleRageGain"
			{
				"linux"		"@_Z14HandleRageGainP9CTFPlayerjff"
				"windows"	"\x55\x8B\xEC\x56\x8B\x75\x08\x85\xF6\x0F\x84\x2A\x2A\x00\x00\x53\x57\x8D\xBE\x2A\x2A\x00\x00\x85\xFF\x0F\x84\x2A\x2A\x00\x00\x83\x7F\x04\x03"
				"linux64"	"@_Z14HandleRageGainP9CTFPlayerjff"
				"windows64"	"\x48\x85\xC9\x0F\x84\x2A\x2A\x2A\x2A\x53\x55"
			}
			
			// Find CTFPowerupBottle::ReapplyProvision using the unique string "mvm_medic_powerup_shared"
			// It should be the first subroutine you find above the string, and has a 1 being pushed into it.
			"CBaseObject::DoQuickBuild"
			{
				"linux"		"@_ZN11CBaseObject12DoQuickBuildEb"
				"windows"	"\x55\x8B\xEC\x53\x56\x57\x8B\xF9\x80\xBF\x22\x0A\x00\x00\x00"
				"linux64"	"@_ZN11CBaseObject12DoQuickBuildEb"
				"windows64"	"\x48\x89\x5C\x24\x10\x57\x48\x83\xEC\x20\x80\xB9\x66\x0C\x00\x00\x00"
			}
			"CTFBot::RealizeSpy"
			{
				"linux"		"@_ZN6CTFBot10RealizeSpyEP9CTFPlayer"
				"windows"	"\x55\x8B\xEC\x83\xEC\x30\x53\x8B\x5D\x08\x57\x8B\xF9\x53\x89\x7D\xFC\x2A\x2A\x2A\xFF\xFF\x84\xC0"
				"linux64"	"@_ZN6CTFBot10RealizeSpyEP9CTFPlayer"
				"windows64"	"\x48\x89\x54\x24\x10\x48\x89\x4C\x24\x08\x41\x54\x41\x57"
			}
			"CTFBot::OnWeaponFired" // Look for string "CTFBot::OnWeaponFired"
			{
				"linux"		"@_ZN6CTFBot13OnWeaponFiredEP20CBaseCombatCharacterP17CBaseCombatWeapon"
				"windows"	"\x55\x8B\xEC\x83\xEC\x18\x53\x56\x57\x33\xD2\x8B\xF9\x8B\x0D\xBC\x22\x74\x10\x89\x55\xE8\x89\x55\xEC\x89\x55\xF8\x8B\x41\x08\x89\x55\xFC\x85\xC0\x74\x41\x68\xC8\x14\x89\x10"
				"linux64"	"@_ZN6CTFBot13OnWeaponFiredEP20CBaseCombatCharacterP17CBaseCombatWeapon"
				"windows64"	"\x4C\x8B\xDC\x49\x89\x5B\x10\x49\x89\x6B\x18\x49\x89\x73\x20\x57\x41\x54\x41\x55\x41\x56\x41\x57\x48\x83\xEC\x60\x48\x8B\x05\xED\x10\x24\x00"
			}
			"CZombie::SpawnAtPos" // Look for string "tf_zombie" (seems to be missing/inlined on win64?)
			{
				"linux"		"@_ZN7CZombie10SpawnAtPosERK6VectorfiP11CBaseEntityNS_14SkeletonType_tE"
				"windows"	"\x55\x8B\xEC\x51\x57\x6A\xFF"
				"linux64"	"@_ZN7CZombie10SpawnAtPosERK6VectorfiP11CBaseEntityNS_14SkeletonType_tE"
				"windows64"	""
			}
			"CHeadlessHatmanAttack::IsPotentiallyChaseable"
			{
				"linux"		"@_ZN21CHeadlessHatmanAttack22IsPotentiallyChaseableEP15CHeadlessHatmanP9CTFPlayer"
				"windows"	"\x55\x8B\xEC\x83\xEC\x14\x53\x56\x8B\x75\x0C\x89\x4D\xFC"
				"linux64"	"@_ZN21CHeadlessHatmanAttack22IsPotentiallyChaseableEP15CHeadlessHatmanP9CTFPlayer"
				"windows64"	""
			}
			"CEyeballBoss::FindClosestVisibleVictim"
			{
				"linux"		"@_ZN12CEyeballBoss24FindClosestVisibleVictimEv"
				"windows"	"\x55\x8B\xEC\x83\xEC\x2C\xF3\x0F\x10\x05\x2A\x2A\x2A\x2A\x53"
				"linux64"	"@_ZN12CEyeballBoss24FindClosestVisibleVictimEv"
				"windows64"	"\x48\x8B\xC4\x48\x89\x48\x08\x41\x54\x48\x81\xEC\x80\x00\x00\x00\x48\x89\x58\x20"
			}
			// Find CEyeballBossTeleport::Update using the string "Halloween.EyeballBossTeleport"
			// Should be one of the subroutines below that has a single xref
			"CEyeballBoss::PickNewSpawnSpot"
			{
				"linux"		"@_ZNK12CEyeballBoss16PickNewSpawnSpotEv"
				"windows"	"\x56\x8B\xF1\x8B\x86\x78\x09\x00\x00"
				"linux64"	"@_ZNK12CEyeballBoss16PickNewSpawnSpotEv"
				"windows64"	""
			}
			"CTFGCServerSystem::PreClientUpdate" // Look for string "Restoring sv_visiblemaxplayers to %d\n" 
			{
				"linux"		"@_ZN17CTFGCServerSystem15PreClientUpdateEv"
				"windows"	"\x55\x8B\xEC\x83\xEC\x28\x53\x56\x8B\xD9"
				"linux64"	"@_ZN17CTFGCServerSystem15PreClientUpdateEv"
				"windows64"	""
			}
			"CVEngineServer::FindMap" // This is just used to get a pointer to CVEngineServer
			{
				"library"	"engine"
				"linux"		"@_ZN14CVEngineServer7FindMapEPci"
				"windows"	"\x55\x8B\xEC\x81\xEC\x44\x02\x00\x00\x8D\x85\xBC\xFD\xFF\xFF"
				"linux64"	"@_ZN14CVEngineServer7FindMapEPci"
				"windows64"	""
			}
			"CTFTankBoss::SetStartingPathTrackNode"
			{
				"linux"		"@_ZN11CTFTankBoss24SetStartingPathTrackNodeEPc"
				"windows"	"\x55\x8B\xEC\x56\x6A\x00\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x6A\x00\x6A\x00"
				"linux64"	"@_ZN11CTFTankBoss24SetStartingPathTrackNodeEPc"
				"windows64"	""
			}
			"CTFDroppedWeapon::Create" // Look for string "tf_dropped_weapon", subroutine with 1 xref
			{
				"linux"		"@_ZN16CTFDroppedWeapon6CreateEP9CTFPlayerRK6VectorRK6QAnglePKcPK13CEconItemView"
				"windows"	"\x55\x8B\xEC\x51\xA1\x2A\x2A\x2A\x2A\x80\xB8\x72\x0C\x00\x00\x00"
				"linux64"	"@_ZN16CTFDroppedWeapon6CreateEP9CTFPlayerRK6VectorRK6QAnglePKcPK13CEconItemView"
				"windows64"	""
			}
			// Find the string "ChargeLevelDegradeThink"
			// It's xref'd in a few different subroutines but it should be the one where it's at the top
			"CTFDroppedWeapon::InitPickedUpWeapon"
			{
				"linux"		"@_ZN16CTFDroppedWeapon18InitPickedUpWeaponEP9CTFPlayerP13CTFWeaponBase"
				"windows"	"\x55\x8B\xEC\x83\xEC\x08\xD9\xEE\x53"
				"linux64"	"@_ZN16CTFDroppedWeapon18InitPickedUpWeaponEP9CTFPlayerP13CTFWeaponBase"
				"windows64"	""
			}
		}
		
		"Functions"
        {
			"CTFDroppedWeapon::InitPickedUpWeapon"
			{
				"signature"	"CTFDroppedWeapon::InitPickedUpWeapon"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"entity"
				
				"arguments"
				{
					"player"
					{
						"type" "cbaseentity"
					}
					"weapon"
					{
						"type" "cbaseentity"
					}
				}
			}
			
			"CTFWeaponBase::SetReloadTimer"
			{
				"signature"	"CTFWeaponBase::SetReloadTimer"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"entity"
				
				"arguments"
				{
					"reloadtime"
					{
						"type"	"float"
					}
				}
			}
			
			"HandleRageGain"
			{
				"signature"	"HandleRageGain"
				"callconv"	"cdecl"
				"return"	"void"
				
				"arguments"
				{
					"player"
					{
						"type"	"cbaseentity"
					}
					"required_buff_flags"
					{
						"type"	"int"
					}
					"damage"
					{
						"type"	"float"
					}
					"inverse_rage_gain_scale"
					{
						"type"	"float"
					}
				}
			}
			
			"CTFPlayer::ApplyPunchImpulseX"
			{
				"signature"	"CTFPlayer::ApplyPunchImpulseX"
				"callconv"	"thiscall"
				"return"	"bool"
				"this"		"entity"
				
				"arguments"
				{
					"impulse"
					{
						"type"	"float"
					}
				}
			}

			"CWeaponMedigun::GetOverhealBonus"
			{
				"signature"	"CWeaponMedigun::GetOverhealBonus"
				"callconv"	"thiscall"
				"return"	"float"
				"this"		"entity"

				"arguments"
				{
					"target"
					{
						"type"	"cbaseentity"
					}
				}
			}
			
			"CHeadlessHatmanAttack::IsPotentiallyChaseable"
			{
				"signature"	"CHeadlessHatmanAttack::IsPotentiallyChaseable"
				"callconv"	"thiscall"
				"return"	"bool"
				"this"		"address"
				
				"arguments"
				{
					"self"
					{
						"type"	"cbaseentity"
					}
					
					"player"
					{
						"type"	"cbaseentity"
					}
				}
			}
			
			"CEyeballBoss::FindClosestVisibleVictim"
			{
				"signature"	"CEyeballBoss::FindClosestVisibleVictim"
				"callconv"	"thiscall"
				"return"	"cbaseentity"
				"this"		"entity"
			}
			
			"CEyeballBoss::PickNewSpawnSpot"
			{
				"signature"	"CEyeballBoss::PickNewSpawnSpot"
				"callconv"	"thiscall"
				"return"	"vectorptr"
				"this"		"entity"
			}
			
			"CTFBot::OnWeaponFired"
			{
				"signature"	"CTFBot::OnWeaponFired"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"ignore"
				
				"arguments"
				{
					"whoFired"
					{
						"type"	"cbaseentity"
					}
					
					"weapon"
					{
						"type"	"cbaseentity"
					}
				}
			}
		
			"CTFGCServerSystem::PreClientUpdate"
			{
				"signature"	"CTFGCServerSystem::PreClientUpdate"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"address"
			}
			
			"CVEngineServer::FindMap"
			{
				"signature"	"CVEngineServer::FindMap"
				"callconv"	"thiscall"
				"return"	"int"
				"this"		"address"
				
				"arguments"
				{
					"mapName"
					{
						"type"	"charptr"
					}
					
					"mapNameMax"
					{
						"type"	"int"
					}
				}
			}
        }
	}
}